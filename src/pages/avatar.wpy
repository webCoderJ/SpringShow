<style lang="less">
.showPage {
  background-size: 100% 100%;
  background-repeat: no-repeat;
  background-position: center top;
  overflow: hidden;
}
.shadow {
  box-shadow: 10rpx 10rpx 20rpx rgba(100, 100, 100, 0.5);
}
.avatarCanvas {
  position: absolute;
  right: 66666px;
  bottom: 66666px;
}
.avatarShowContainer {
  // height: 100%;
  // width: 100%;
  .zIndex_0 {
    z-index: 0;
  }
  .zIndex_1 {
    z-index: 1;
  }
  .zIndex_2 {
    z-index: 2;
  }
  .zIndex_3 {
    z-index: 2;
  }
  .zIndex_4 {
    z-index: 2;
  }
  .zIndex_5 {
    z-index: 2;
  }
  .hidden {
    display: none;
  }
  .canvasBox {
    background-color: #fff;
    opacity: 0.98;
    border-radius: 10rpx;
    position: relative;
    border: 1px solid #ccc;
    background-size: 100% auto;
    background-repeat: no-repeat;
    background-position: center top;
    overflow: hidden;
    .avatarCanvas {
      width: 100%;
      height: 100%;
      position: absolute;
      top: 0;
      left: 0;
    }
    .displayImg {
      position: absolute;
      top: 0;
      left: 0;
    }
    .canvasReplace {
      position: absolute;
      top: 0;
      left: 0;
    }
    .slicerBox {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      .slicerContainer {
        position: relative;
        width: 100%;
        height: 100%;
        left: 0;
        top: 0;
        .slicerImgBox {
          position: absolute;
          border-radius: 5rpx;
          &.checked {
            border: 1px dotted #222;
          }
          .slicerImgBoxInner {
            position: relative;
            left: 0;
            top: 0;
            .slicerImg {
            }
            .imgMover {
              position: absolute;
              padding: 20rpx;
              bottom: -38rpx;
              right: -38rpx;
            }
            .imgX {
              position: absolute;
              padding: 20rpx;
              top: -38rpx;
              right: -38rpx;
            }
          }
        }
      }
    }
  }
}

.originSlicerBox {
  background-color: rgba(245, 214, 166, 0.8);
  opacity: 0.8;
  border: 2px solid rgba(255, 255, 255, 0.4);
  border-radius: 5rpx;
  padding: 5rpx;
  box-sizing: border-box;
  white-space: nowrap;
  position: relative;
  .slicerImg {
    display: inline-block;
    width: 40rpx;
    padding: 10rpx;
    vertical-align: middle;
  }
}

.slicerTypes {
  margin-top: -30rpx;
  height: 100rpx;
  .slicerTypesBox {
    height: 100%;
    display: flex;
    flex-flow: row nowrap;
    justify-content: space-around;
    align-items: center;
    margin: 0rpx 200rpx;
    border-radius: 5rpx;
    .slicerType {
      display: inline-block;
      transition: all 0.2s ease;
       margin-top: 0rpx;
      &.checked {
        margin-top: -8rpx;
      }
      .typeBtn {
        border-radius: 10rpx;
      }
    }
  }
}

.btnsBox {
  display: flex;
  display: -webkit-flex;
  flex-flow: row nowrap;
  justify-content: space-between;
  .btn {
    border-radius: 20rpx;
    padding: 18rpx 32rpx;
    color: #fff;
    background-color: #ecc386;
    font-weight: 600;
    display: inline-block;
    font-size: 32rpx;
  }
}
</style>

<template>
<view class="showPage" style="width:{{ deviceW }}px; height: {{ deviceH }}px; background-image: url('{{ imgcdn }}/upload/img/backimg/avatar_bg.png');">
  <canvas class="avatarCanvas zIndex_0 {{ hideCanvas ? '' : ''}}" canvas-id="avatarCanvas" style="width: {{ cvsSize.width }}px; height: {{ cvsSize.height }}px;"></canvas>
  <!-- background-image: url('../imgs/avatar_bg.png'); -->
  <view class="avatarShowContainer" id="BOX-0" style="padding-top: {{ cvsPos.y }}px; margin-left: {{ cvsPos.x }}px;">
    <view class="canvasBox shadow" style="width: {{ cvsSize.width }}px; height: {{ cvsSize.height }}px;">
      <image 
        class="displayImg"
        src="{{ avatarInfo.url }}" 
        style="width: {{ avatarInfo.scaleW }}px; height: {{ avatarInfo.scaleH }}px;transform:translateX({{ avatarInfo.x }}px) translateY({{ avatarInfo.y }}px);"
        mode="scaleToFill" 
      ></image>
      <scroll-view style="width: {{ cvsSize.width }}px; height: {{ cvsSize.height }}px;" class="slicerBox zIndex_2" >
        <view class="slicerContainer zIndex_3"
          id="moveAvatar-0"
          @touchstart.stop="touchStart"
          @touchmove.stop="touchMove"
          @touchend.stop="touchEnd"
        >
           <repeat for="{{ currentSlicer }}" key="index" index="index" item="slicer">
             <view class="slicerImgBox {{ slicer.checked ? 'checked zIndex_5' : 'zIndex_4'}}" 
                style="top: {{ slicer.y }}px; left:{{ slicer.x }}px; transform: rotate({{ slicer.rotate }}deg) scale({{ slicer.scale }}); height: {{ slicer.height }}px; width: {{ slicer.width }}px"
                id="move-{{ index }}"
                @touchstart.stop="touchStart"
                @touchmove.stop="touchMove"
                @touchend.stop="touchEnd"
              >
               <view class="slicerImgBoxInner" style="height: {{ slicer.height }}px; width: {{ slicer.width }}px" >
                  <image class="slicerImg" 
                    src="{{ slicer.path }}" 
                    style="height: {{ slicer.height }}px; width: {{ slicer.width }}px" 
                    mode="scaleToFill"
                  ></image>
                  <image 
                    wx:if="{{ slicer.checked }}"
                    class="imgMover" src="../imgs/icon_move.png" 
                    style="height: 40rpx; width: 40rpx;" 
                    mode="scaleToFill"
                    id="transform-{{ index }}"
                    @touchstart.stop="touchStart"
                    @touchmove.stop="touchMove"
                    @touchend.stop="touchEnd"
                  ></image>
                  <image 
                    wx:if="{{ slicer.checked }}"
                    class="imgX" src="../imgs/icon_x.png" 
                    style="height: 40rpx; width: 40rpx;" 
                    mode="scaleToFill"
                    id="delete-{{ index }}"
                    @touchend.stop="xSlicer"
                  ></image>
               </view>
             </view>
          </repeat>
        </view>
      </scroll-view>
    </view>
  </view>

  <scroll-view 
    scroll-x="true"
    class="originSlicerBox"
    style="height: 200rpx;width: {{ cvsSize.width }}px; margin-left: {{ cvsPos.x }}px; margin-top: 50rpx;"
  >
    <view>
      <repeat for="{{ originSlicer }}" index="index" item="slicer">
        <image class="slicerImg" 
          style="width: {{ slicer._width }}px;height: {{ slicer._height }}px;"
          src="{{ slicer.path }}"
          mode="scaleToFill"
          id="originSlicer-{{ index }}"
          @tap="chooseSlicer"
        ></image>
      </repeat>
    </view>
  </scroll-view>

  <scroll-view class="slicerTypes">
    <view class="slicerTypesBox">
      <repeat for="{{ SlicedTypesList }}" key="index" index="index" item="item">
        <view class="slicerType {{ item.checked ? 'checked' : ''}}" @tap="toggleType" id="{{ item.Name }}-{{ index }}">
          <image class="typeBtn" mode="scaleToFill" src="{{ imgcdn + item.Img }}" style="width: 80rpx; height: 80rpx;"></image>
        </view>
      </repeat>
    </view>
  </scroll-view>
 
  <view class="btnsBox"
    style="margin-left: {{ cvsPos.x }}px; margin-top: 30rpx;width: {{ cvsSize.width }}px;"
  >
    <view class="btn shadow" @tap="chooseImg">上传头像/拍照</view>
    <view class="btn shadow" @tap="saveToPhone" @touchstart="beforeSaveToPhone">保存到手机</view>
  </view>
</view>
</template>

<script>
import wepy from "wepy";
import {
  touchInfo,
  string,
  stringWH,
  distance,
  cosDeg,
  drawAvatar,
  deepClone,
  scale,
  realCoor,
  angle,
  atan2Radian,
  radianToDeg,
  initData,
  http
} from "../utils/utilJs";
import WxTouchEvent from "../utils/wx-touch-event";
let TouchEvent = new WxTouchEvent();
export default class Avatar extends wepy.page {
  config = {
     navigationBarTitleText: '头像秀',
    enablePullDownRefresh: false
  };
  data = {
    userInfo: {},

    deviceW: null,
    deviceH: null,

    imgcdn: "",

    originSlicer: [],
    currentSlicer: [],
    SlicedTypesList: [],
    allSlicers: {},

    // cvs位置
    cvsPos: {
      x: null,
      y: null
    },

    // 定义操作区尺寸
    cvsSize: {
      width: 595,
      height: 595,
      ratio: 1
    },
    // 相对坐标
    coorX: null,
    coorY: null,

    // 设计图比
    designRatio: null,
    // 头像信息
    avatarInfo: {
      url: "",
      width: 0,
      height: 0,
      cWidth: 0,
      cHeight: 0,
      _check: false,
      x: 0,
      y: 0,
      curX: 0,
      curY: 0,
      startX: 0,
      startY: 0,
      insideX: 0,
      insideY: 0,
      scaleW: 0,
      scaleH: 0,
      scale: 1
    },
    hideCanvas: true,
    initAvatar(data, that) {
      // canvas 数据宽高
      let cvsDS = {
        w: that.cvsSize.width,
        h: that.cvsSize.height
      };
      // 判断是横向还是竖向图
      let type = "";
      let drawShort = 0;
      let scale = 1;
      let scaleH = 0;
      let scaleW = 0;
      if (data.width > data.height) {
        type = "horizontal";
        drawShort = data.height;
        scale = cvsDS.h / data.height;
        scaleH = cvsDS.h;
        scaleW = data.width * scale;
      } else if (data.width < data.height) {
        type = "vertical";
        drawShort = data.width;
        scale = cvsDS.w / data.width;
        scaleW = cvsDS.w;
        scaleH = data.height * scale;
      } else {
        type = "square";
        drawShort = data.width;
        scale = cvsDS.w / data.width;
        scaleW = cvsDS.w;
        scaleH = cvsDS.h;
      }

      // 记录信息，以供图片生成时使用
      that.avatarInfo = {
        url: data.path,
        width: drawShort,
        height: drawShort,
        cWidth: cvsDS.w,
        cHeight: cvsDS.h,
        scaleW: scaleW,
        scaleH: scaleH,
        scale: scale,
        _type: type,
        _check: true,
        x: 0,
        y: 0
      };
      console.log(that.avatarInfo);
      that.$apply();
      that.ctx.drawImage(
        data.path,
        0,
        0,
        data.width,
        data.width,
        0,
        0,
        cvsDS.w,
        cvsDS.h
      );
      that.ctx.draw();
    }
  };
  async onLoad() {
    const _this = this;
    initData(_this);
    console.log(this);

    let ctx = (_this.ctx = wx.createCanvasContext("avatarCanvas"));
    wepy.getUserInfo({
      success(res){
        console.log('uerInfo',res)
        _this.userInfo = res.userInfo
        wepy.getImageInfo({
          src: _this.userInfo.avatarUrl,
          success: function(res2) {
            _this.initAvatar(res2, _this)
          }
        });
      }
    })

    wepy.getSystemInfo({
      success: function(res) {
        _this.designRatio = res.windowWidth / 750;

        _this.deviceW = res.windowWidth;
        _this.deviceH = res.windowHeight;
        _this.cvsSize = {
          width: 595 * _this.designRatio,
          height: 595 * _this.designRatio,
          ratio: 1
        };

        _this.cvsPos.x = 77.5 * _this.designRatio;
        _this.cvsPos.y = 100 * _this.designRatio;
      }
    });

    // 获取切片数据
    let SlicedTypesList = await http.get(_this.domainname + "/api/YearShow/GetSmallAppList");
    // console.log(" _this.SlicedTypesList", SlicedTypesList);
    _this.SlicedTypesList = SlicedTypesList.data.msg.SlicedTypesList;
    // 获取所有切片列表
    let slicerPaths = await http.get( _this.domainname + "/api/YearShow/GetYearSlicedList", { Typesid: 0 });
    // initSlicers(_this.SlicedTypesList[0]['Name'])
    let allSlicers = slicerPaths.data.msg
    // 初始化所有切片
    let firstFlag = 'FIRST_TYPE_LENGTH'
    let firstFlagKey = 'FIRST_TYPE_KEY'
    let firstFlagInit = 'FIRST_TYPE_INIT'
    Object.keys(allSlicers).forEach(key => {
      _this.allSlicers[key] = []
      if(!_this.allSlicers[firstFlagKey]){
        _this.allSlicers[firstFlag] = allSlicers[key].length
        _this.allSlicers[firstFlagKey] = key
        _this.allSlicers[firstFlagInit] = false
      }
      console.log('_this.allSlicers', _this.allSlicers)
      allSlicers[key].forEach((item, index) => {
        let path = _this.domainname + item.Img;
        wepy.getImageInfo({
          src: path,
          success(data) {
            // 160 是rpx宽度，以750设计图为基准
            let ratio = 160 / data.width;
            let slicer = {
              path: data.path,
              width: data.width * ratio * _this.designRatio,
              height: data.height * ratio * _this.designRatio,
              whRatio: data.width / data.height,
              rotate: 0,
              scale: 1,
              x: 10,
              y: 10,
              checked: false,
              _height: data.height * ratio * _this.designRatio,
              _width: data.width * ratio * _this.designRatio,
              _id: "id_" + index
            };
            _this.allSlicers[key].push(slicer)
            // 第一类切片加载完毕，push到originSlicer选区
            if(index + 1 == 12 && !_this.allSlicers[firstFlagInit]){
              _this.$apply(() => {
                _this.allSlicers[firstFlagInit] = true
                _this.originSlicer =  _this.allSlicers[_this.allSlicers[firstFlagKey]]
                console.log('_this.originSlicer', _this.allSlicers[_this.allSlicers[firstFlagKey]])
                _this.SlicedTypesList.forEach(type => {
                  console.log(type)
                  if(type.Name == _this.allSlicers[firstFlagKey]){
                    type.checked = true
                  }
                })
              })
            }
          },
          fail(e){
            console.log(e)
          }
        });
      })
    })
    // 绑定事件
    _this.TouchEvent = TouchEvent;
    _this.TouchEvent.bind({
      //初始化后绑定事件
      touchStart(e) {
        // 记录盒子位置
        _this.coorX = _this.cvsPos.x;
        _this.coorY = _this.cvsPos.y;
        console.log("touchStart", e);
        let eInfo = touchInfo(e);
        // 移动头像
        if (eInfo.type == "moveAvatar") {
          _this.avatarInfo.startX = eInfo.point.pageX;
          _this.avatarInfo.startY = eInfo.point.pageY;
          _this.avatarInfo.insideX =
            eInfo.point.pageX - _this.coorX - _this.avatarInfo.x;
          _this.avatarInfo.insideY =
            eInfo.point.pageY - _this.coorY - _this.avatarInfo.y;
        } else {
          let slicer = _this.currentSlicer[eInfo["index"]];
          // 选中当前添加切片
          _this.currentSlicer.forEach(item => {
            item.checked = false;
          });
          slicer.checked = true;

          // 记录指针在切片内距离
          slicer.insideX = eInfo.point.pageX - _this.coorX - slicer.x;
          slicer.insideY = eInfo.point.pageY - _this.coorY - slicer.y;

          // 记录中心点坐标
          slicer.centerX = _this.coorX + slicer.x + slicer.width / 2;
          slicer.centerY = _this.coorY + slicer.y + slicer.height / 2;

          // 变换起点坐标
          slicer.moverX = _this.coorX + slicer.x + slicer.width;
          slicer.moverY = _this.coorY + slicer.y + slicer.height;

          // 记录初始弧度
          slicer.initRadian = atan2Radian(
            slicer.centerX,
            slicer.centerY,
            slicer.moverX,
            slicer.moverY
          );
        }
      },
      touchMove(e) {
        let eInfo = touchInfo(e);
        let slicer = _this.currentSlicer[eInfo["index"]];
        // console.log("touchmove", e, touchInfo(e))
        if (eInfo.type == "moveAvatar") {
          if (_this.avatarInfo._type == "horizontal") {
            _this.avatarInfo.x =
              eInfo.point.pageX - _this.coorX - _this.avatarInfo.insideX;
          } else if (_this.avatarInfo._type == "vertical") {
            let curY = _this.avatarInfo.y;
            _this.avatarInfo.y =
              eInfo.point.pageY - _this.coorY - _this.avatarInfo.insideY;
          }
        } else if (eInfo.type == "move") {
          if (_this.coorX && _this.coorY) {
            let realtimeX = eInfo.point.pageX - _this.coorX - slicer.insideX;
            let realtimeY = eInfo.point.pageY - _this.coorY - slicer.insideY;

            slicer.x = realtimeX;
            slicer.y = realtimeY;
            console.log("[切片移动]", realtimeX, realtimeY);
          }
        } else if (eInfo.type == "transform") {
          slicer.curX = eInfo.point.pageX;
          slicer.curY = eInfo.point.pageY;
          slicer.curRadian = atan2Radian(
            slicer.centerX,
            slicer.centerY,
            slicer.curX,
            slicer.curY
          );
          // 计算宽高和旋转角度
          Object.assign(slicer, {
            rotate: radianToDeg(slicer.curRadian - slicer.initRadian),
            scale: scale(
              slicer.centerX,
              slicer.centerY,
              slicer.moverX,
              slicer.moverY,
              slicer.curX,
              slicer.curY
            )
          });
        }
      },
      touchEnd(e) {
        // let eInfo = touchInfo(e);
        // let slicer = _this.currentSlicer[eInfo["index"]];
        console.log("touchend", e);
      },
      rotate(e) {
        let eInfo = touchInfo(e);
        let slicer = _this.currentSlicer[eInfo["index"]];
        Object.assign(slicer, {
          scale: e.scale
        });
      }
    });
  }
  onShareAppMessage (res) {
    if (res.from === 'button') {
      // 来自页面内转发按钮
      console.log(res.target)
    }
    return {
      title: '我在春节秀制作了一张狂拽酷炫的头像，你也来试试吧！',
      path: '/pages/avatar',
      // imageUrl: '',
      success: function(res) {
        // 转发成功
      },
      fail: function(res) {
        // 转发失败
      }
    }
  }
  methods = {
    touchStart: TouchEvent.start.bind(TouchEvent),
    touchMove: TouchEvent.move.bind(TouchEvent),
    touchEnd: TouchEvent.end.bind(TouchEvent),
    chooseImg(e) {
      const _this = this;
      _this.$apply(() => {
        _this.hideCanvas = true;
      });
      wepy.chooseImage({
        count: 1,
        success(res) {
          wepy.getImageInfo({
            src: res.tempFilePaths[0],
            success(data) {
              _this.initAvatar(Object.assign({}, data, {
                path: res.tempFilePaths[0]
              }), _this)
            }
          });
        }
      });
    },
    beforeSaveToPhone() {
      const _this = this;
      _this.$apply(() => {
        _this.hideCanvas = false;
      });
    },
    saveToPhone(e) {
      const _this = this;
      let ctx = _this.ctx;
      // 先绘制背景
      let info = _this.avatarInfo;
      if (info._check) {
        _this.ctx.drawImage(
          info.url,
          -info.x / info.scale,
          -info.y / info.scale,
          info.cWidth / info.scale,
          info.cHeight / info.scale,
          0,
          0,
          info.cWidth,
          info.cHeight
        );
      }

      // 遍历切片绘到canvas
      _this.currentSlicer.forEach(slicer => {
        console.log("[saveToPhone]", slicer);
        _this.ctx.translate(
          slicer.x + slicer.width / 2,
          slicer.y + slicer.height / 2
        );
        _this.ctx.scale(slicer.scale, slicer.scale);
        _this.ctx.rotate(slicer.rotate * Math.PI / 180);
        _this.ctx.drawImage(
          slicer.path,
          -slicer.width / 2,
          -slicer.height / 2,
          slicer.width,
          slicer.height
        );
        _this.ctx.scale(1 / slicer.scale, 1 / slicer.scale);
        _this.ctx.rotate(-slicer.rotate * Math.PI / 180);
        _this.ctx.translate(
          -slicer.x - slicer.width / 2,
          -slicer.y - slicer.height / 2
        );
      });
      _this.ctx.draw();

      wepy.canvasToTempFilePath({
        x: 0,
        y: 0,
        quality: 1,
        width: info.cWidth,
        height: info.cHeight,
        destWidth: info.cWidth * 10,
        destHeight: info.cHeight * 10,
        canvasId: "avatarCanvas",
        success: function(res) {
          console.log(res);
          wx.saveImageToPhotosAlbum({
            filePath: res.tempFilePath
          });
          wx.showToast({ title: "保存成功" });
        }
      });
    },
    chooseSlicer(e) {
      const _this = this;
      _this.$apply(() => {
        _this.hideCanvas = true;
      });
      let eInfo = touchInfo(e);
      let slicer = _this.originSlicer[eInfo["index"]];
      _this.currentSlicer.forEach(item => {
        item.checked = false;
      });
      let copySlicer = deepClone(slicer);
      copySlicer.checked = true;
      _this.currentSlicer.push(copySlicer);
    },
    xSlicer(e) {
      const _this = this;
      let eInfo = touchInfo(e);
      // 移除数据
      _this.currentSlicer = _this.currentSlicer.filter(
        (item, index) => index != eInfo["index"]
      );
    },
    toggleType(e) {
      const _this = this;
      let eInfo = touchInfo(e);
      console.log('eInfo', eInfo)
      let type = eInfo.type;
      let index = eInfo.index;
      _this.$apply(() => {
        _this.originSlicer = _this.allSlicers[type]
        _this.SlicedTypesList.forEach(typeList => {
          typeList.checked = false
        })
        _this.SlicedTypesList[index].checked = true
      })
    }
  };
}
</script>
